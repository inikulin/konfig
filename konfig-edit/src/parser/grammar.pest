konfig = { SOI ~ ( expr+ | docs )* ~ EOI }

expr = { path ~ SPACE* ~ "=" ~ SPACE* ~ rhs ~ expr_terminator }
docs = { ( !path_start ~ ( !docs_terminator ~ ANY )+ ~ docs_terminator ) | NEWLINE+ }

// NOTE: at least new lines are required to break quotation in markdown
expr_terminator = @{ 
    ( SPACE* ~ NEWLINE ){2} | 
    ( ( SPACE | NEWLINE )* ~ EOI )
}

docs_terminator = @{ NEWLINE | EOI }

// Path
//--------------------------------------------------------------------------------------------
path = { 
    path_start ~ ( path_item ~ ( SPACE* ~ separator ~ SPACE* ~ path_item )* )?
}
path_start = _{ SPACE* ~ ">" ~ SPACE* }
separator = _{ ">" ~ ( SPACE* ~ NEWLINE ~ ">" )? }
path_item = { field_name | enum_variant | map_key | index }

field_name = @{ ASCII_ALPHA ~ ( ASCII_ALPHANUMERIC | "_" )* }

enum_variant = ${ "`" ~ enum_variant_ident ~ "`" }
enum_variant_ident = @{ field_name }

map_key = { "[" ~ SPACE* ~ map_key_literal ~ SPACE* ~ "]" }
map_key_literal = { single_quoted_string | double_quoted_string } 

index = { "[" ~ SPACE* ~ index_digits ~ SPACE* ~ "]" }
index_digits = ${ "0" | ( ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* ) }


// RHS
//--------------------------------------------------------------------------------------------
rhs = { array_of_primitives | primitive }

array_of_primitives = { "[" ~ (array_of_primitives_values | INDENTATION) ~ "]" }

array_of_primitives_values = {
    INDENTATION ~ primitive ~ INDENTATION ~ 
    ( "," ~ INDENTATION ~ primitive ~ INDENTATION )* ~ 
    ("," ~ INDENTATION)? 
}


// Primitives
//--------------------------------------------------------------------------------------------
primitive = {
    null | boolean | float | neg_int | pos_int | single_quoted_string | double_quoted_string |
    raw_string | enum_variant
}

null = { "null" }

boolean = { "true" | "false" }

pos_int = { ( "0x" ~ hex_digits ) | dec_digits }
hex_digits = { ASCII_HEX_DIGIT+ }
dec_digits = { ASCII_DIGIT+ }

neg_int = { "-" ~ pos_int }

float = { "-"? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* ~ exponent? }
exponent = _{ ( "e" | "E" ) ~ ( "+" | "-" )? ~ ASCII_DIGIT+ }

double_quoted_string = { "\"" ~ double_quoted_string_content ~ "\"" }
double_quoted_string_content = { ( double_quoted_string_text | esc )* }
double_quoted_string_text = { ( !("\"" | "\\" | NEWLINE ) ~ ANY )+ }

single_quoted_string = { "'" ~ single_quoted_string_content ~ "'" }
single_quoted_string_content = { ( single_quoted_string_text | esc )* }
single_quoted_string_text = { ( !("'" | "\\" | NEWLINE ) ~ ANY )+ }

raw_string = { raw_string_start ~ raw_string_text ~ raw_string_end }
raw_string_start = { NEWLINE ~ "```" ~ raw_string_lang_ident? ~ SPACE* ~ NEWLINE }
raw_string_end = { NEWLINE ~ "```" }
raw_string_text = { ( !raw_string_end ~ ANY )+ }
raw_string_lang_ident = _{ ( ASCII_ALPHANUMERIC | "_" )+ }

esc = ${ "\\" ~ ( esc_alias | ( "u" ~ esc_unicode ) ) }
esc_alias = { "\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" }
esc_unicode = { ASCII_HEX_DIGIT{6} }


// Spacing
//--------------------------------------------------------------------------------------------
SPACE = _{ " " | "\t" }

// NOTE: only single newline is allowed, double new line breaks quotation in markdown
INDENTATION = _{ SPACE* ~ NEWLINE? ~ SPACE* } 